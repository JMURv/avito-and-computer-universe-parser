from loguru import logger
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified
from telegram.initializer import dp, bot
from telegram.keyboards import (
    main_markup,
    cancel,
    my_tasks,
)
from db import DBCommands


DB = DBCommands()


async def send_image(cid, caption: str, markup: types.InlineKeyboardMarkup):
    with open('./data/avito_logo.png', 'rb') as photo:
        return await bot.send_photo(
            chat_id=cid,
            photo=photo,
            caption=caption,
            reply_markup=markup
        )


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    is_registered = await DB.create_user(message.from_user.id)
    hello_text = "–ü—Ä–∏–≤–µ—Ç üëã\n" \
                 "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞ —Ç–µ–±—è!\n" \
                 "–ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ –∏ FAQ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: " \
                 "/help"
    if is_registered:
        hello_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username} üëã\n"
    # TODO: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    with open('./data/avito_logo.png', 'rb') as photo:
        return await message.answer_photo(
            photo=photo,
            caption=hello_text,
            reply_markup=await main_markup()
        )


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(
        "FAQ:\n"
        "1. –°–∫–æ–ª—å–∫–æ —è –º–æ–≥—É –∑–∞–≤–µ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π?\n"
        "–û—Ç–≤–µ—Ç: –ù–µ –±–æ–ª–µ–µ 1 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "2. –ö–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞?\n"
        "–û—Ç–≤–µ—Ç: –°—Å—ã–ª–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤–∏—Ç–æ. "
        "–í—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º, –Ω–µ –ø–ª–∏—Ç!"
        "–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å: "
        "—Ü–µ–Ω—É, –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Ç–¥.\n"
        "–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - "
        "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ, "
        "–∏–Ω–∞—á–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n",
        reply_markup=await main_markup()
    )


@dp.callback_query_handler(lambda query: query.data == cancel, state='*')
async def cancel_handler(query: types.CallbackQuery | types.Message, state: FSMContext):
    await query.message.delete()
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == my_tasks)
async def my_tasks_handler(query: types.CallbackQuery):
    tasks = await DB.read_user_task(query.from_user.id)
    try:
        return await query.message.edit_caption(
            caption=f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏: \n{tasks}",
            reply_markup=await main_markup()
        )
    except MessageNotModified:
        return


async def bot_start():
    await dp.start_polling(bot)
