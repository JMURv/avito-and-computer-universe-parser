from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputMediaPhoto
from aiogram.utils.exceptions import MessageNotModified
from telegram import States
from telegram.initializer import dp, bot
from telegram.keyboards import (
    main_markup,
    delete_task,
    cancel_markup,
    cancel,
    add_task,
    back,
    back_markup,
    my_tasks,
    buy_subscription,
    start_all_tasks,
    active_tracking_markup,
    stop_all_tasks
)
from telegram.payment import calculate_price
from addons.validators import url_validator, payment_validator
from data_base import DBCommands


DB = DBCommands()


async def send_image(cid, caption: str, markup: types.InlineKeyboardMarkup):
    with open('./data/avito_logo.png', 'rb') as photo:
        return await bot.send_photo(
            chat_id=cid,
            photo=photo,
            caption=caption,
            reply_markup=markup
        )


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    is_registered = await DB.create_user(message.from_user.id)
    hello_text = "–ü—Ä–∏–≤–µ—Ç üëã\n" \
                 "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞ —Ç–µ–±—è!\n" \
                 "–ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ –∏ FAQ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: " \
                 "/help"
    if is_registered:
        hello_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username} üëã\n"
    with open('./data/avito_logo.png', 'rb') as photo:
        return await message.answer_photo(
            photo=photo,
            caption=hello_text,
            reply_markup=await main_markup()
        )


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(
        "FAQ:\n"
        "1. –°–∫–æ–ª—å–∫–æ —è –º–æ–≥—É –∑–∞–≤–µ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π?\n"
        "–û—Ç–≤–µ—Ç: –ù–µ –±–æ–ª–µ–µ 1 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "2. –ö–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞?\n"
        "–û—Ç–≤–µ—Ç: –°—Å—ã–ª–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤–∏—Ç–æ. "
        "–í—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º, –Ω–µ –ø–ª–∏—Ç!"
        "–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å: "
        "—Ü–µ–Ω—É, –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Ç–¥.\n"
        "–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - "
        "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ, "
        "–∏–Ω–∞—á–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n",
        reply_markup=await main_markup()
    )


@dp.callback_query_handler(lambda query: query.data == cancel, state='*')
async def cancel_handler(query: types.CallbackQuery | types.Message, state: FSMContext):
    await query.message.delete()
    await state.finish()


@dp.callback_query_handler(lambda query: query.data == my_tasks)
async def my_tasks_handler(query: types.CallbackQuery):
    tasks = await DB.read_user_task(query.from_user.id)
    try:
        return await query.message.edit_caption(
            caption=f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏: \n{tasks}",
            reply_markup=await main_markup()
        )
    except MessageNotModified:
        return await query.message.edit_reply_markup(
            reply_markup=await main_markup()
        )


@dp.callback_query_handler(lambda query: query.data == start_all_tasks)
async def start_tracking_handler(query: types.CallbackQuery) -> types.Message:
    uid = query.from_user.id
    worker = await DB.read_tasks(
        user_id=uid
    )
    tasks_names = list(worker.keys())

    available_workers = 1

    if len(tasks_names) == 0:
        return await query.message.edit_caption(
            caption='–£ –í–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!',
            reply_markup=await main_markup()
        )

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if await DB.is_subscriber(uid):
        available_workers = await DB.worker_quantity_check(
            user_id=uid
        )

    if len(tasks_names) > available_workers:
        return await query.message.edit_caption(
            caption=f'–£ –í–∞—Å –±–æ–ª–µ–µ {available_workers} –æ–±—ä—è–≤–ª–µ–Ω–∏–π!',
            reply_markup=await main_markup()
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Ç—Ä–µ–∫–∏–Ω–≥
    if await DB.is_exist(user_id=uid):
        return await query.message.edit_caption(
            caption='–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã!',
            reply_markup=await active_tracking_markup()
        )
    else:
        for task_name in tasks_names:
            await DB.register_first_result(
                user_id=uid,
                task_name=task_name,
                first_result_name='test_name'
            )
        await DB.enable_track(uid)
        return await query.message.edit_caption(
            caption='–°–ª–µ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!',
            reply_markup=await active_tracking_markup()
        )


@dp.callback_query_handler(lambda query: query.data == stop_all_tasks)
async def stop_tracking_handler(query: types.CallbackQuery) -> types.Message:
    await DB.disable_track(query.from_user.id)
    await query.answer(text='–¢—Ä–µ–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    with open('./data/avito_logo.png', 'rb') as photo:
        await query.message.edit_caption(caption='')
        return await query.message.edit_media(
            media=InputMediaPhoto(media=photo),
            reply_markup=await main_markup()
        )


@dp.callback_query_handler(lambda query: query.data == buy_subscription)
async def buy_subscription_handler(query: types.CallbackQuery) -> types.Message:
    if await DB.is_subscriber(query.from_user.id):
        return await query.message.answer(
            text='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞!',
            reply_markup=await main_markup()
        )
    await States.BuySubscription.how_long.set()
    return await query.message.answer(
        text='–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Ö–æ—Ç–∏—Ç–µ?\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.',
        reply_markup=await cancel_markup()
    )


@dp.message_handler(state=States.BuySubscription.how_long)
async def get_time(message: types.Message, state: FSMContext) -> types.Message:
    async with state.proxy() as data:
        data['how_long'] = message.text
    await States.BuySubscription.how_many.set()
    return await message.answer(
        text='–ö–∞–∫ –º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–≤–∞—Ç—å?',
        reply_markup=await back_markup()
    )


@dp.message_handler(state=States.BuySubscription.how_many)
async def get_quantity(message: types.Message, state: FSMContext) -> None:
    uid = message.from_user.id
    answer = message.text
    await state.update_data(how_many=answer)
    data = await state.get_data()

    worker_quantity, days = data.get('how_many'), data.get('how_long')
    if not await payment_validator(worker_quantity, days):
        await state.finish()
        await message.answer(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            reply_markup=await main_markup()
        )

    await state.finish()
    subscription_data = {
        'worker_quantity': worker_quantity,
        'days': days,
        'amount': await calculate_price(worker_quantity, days)
    }


@dp.callback_query_handler(lambda query: query.data == delete_task)
async def delete_task_handler(query: types.CallbackQuery) -> types.Message:
    await States.DeleteTask.name.set()
    return await query.message.answer(
        text='–í–≤–µ–¥–∏ –∏–º—è –∑–∞–¥–∞—á–∏:',
        reply_markup=await cancel_markup()
    )


@dp.message_handler(state=States.DeleteTask.name)
async def delete_task_name(message: types.Message, state: FSMContext) -> types.Message:
    db_response = await DB.delete_task(
        user_id=message.from_user.id,
        task_name=message.text
    )
    await state.finish()
    return await send_image(
        cid=message.from_user.id,
        caption=db_response,
        markup=await main_markup()
    )


@dp.callback_query_handler(lambda query: query.data == add_task)
async def add_task_handler(query: types.CallbackQuery) -> None:
    await query.message.answer(
        text='–í–≤–µ–¥–∏ –∏–º—è –∑–∞–¥–∞—á–∏: ',
        reply_markup=await cancel_markup()
    )
    await States.AddTask.name.set()


@dp.message_handler(state=States.AddTask.name)
async def add_task_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['task_name'] = message.text
    await States.AddTask.url.set()
    return await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL',
        reply_markup=await back_markup()
    )


@dp.callback_query_handler(lambda query: query.data == back, state=States.AddTask.url)
async def process_task_name_back(query: types.CallbackQuery, state: FSMContext):
    await States.AddTask.name.set()
    async with state.proxy() as data:
        return await query.message.edit_text(
            text=f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å <b>{data['task_name']}</b>?",
            reply_markup=await cancel_markup()
        )


@dp.message_handler(state=States.AddTask.url)
async def add_task_url(message: types.Message, state: FSMContext):
    cid = message.from_user.id
    async with state.proxy() as data:
        data['task_url'] = message.text
        name = data.get('task_name')
        url = data.get('task_url')

    if not await url_validator(url):
        await States.AddTask.url.set()
        return await message.answer(
            text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑',
            reply_markup=await back_markup()
        )

    await message.answer(f'–î–æ–±–∞–≤–ª—è–µ–º {name} –≤ –Ω–∞—à—É –±–∞–∑—É..')
    await DB.create_task(
        user_id=cid,
        name=f"'{name}'",
        url=f"'{url}'"
    )

    await state.finish()
    return await send_image(
        cid=cid,
        caption=f"–ó–∞–¥–∞—á–∞ {name} –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        markup=await main_markup()
    )


async def bot_start():
    await dp.start_polling(bot)
