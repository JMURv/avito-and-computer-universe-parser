from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from telegram.States import SetWorker, DeleteWorker
from telegram.initializer import dp
from telegram.keyboards import keyboard_client

from data_base.crud import insert_values, delete_data, check_workers, read_data
from data_base.tracking import disable_track, register_user

from validators import url_validator
from tracking import worker_checker


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    is_registered = await register_user(message.from_user.id)
    if not is_registered:
        await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n"
                             "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞ —Ç–µ–±—è!\n"
                             "–ü—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ –∏ FAQ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:"
                             " /help",
                             reply_markup=keyboard_client)
    else:
        name = message.from_user.username
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name} üëã\n"
                             "–Ø —Ç–µ–±—è –ø–æ–º–Ω—é! –ö–∞–∫ –¥–µ–ª–∞?",
                             reply_markup=keyboard_client)


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer("FAQ:\n"
                         "1. –°–∫–æ–ª—å–∫–æ —è –º–æ–≥—É –∑–∞–≤–µ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π?\n"
                         "–û—Ç–≤–µ—Ç: –ù–µ –±–æ–ª–µ–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
                         "2. –ö–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞?\n"
                         "–û—Ç–≤–µ—Ç: –°—Å—ã–ª–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤–∏—Ç–æ. "
                         "–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å: "
                         "—Ü–µ–Ω—É, –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Ç–¥.\n"
                         "–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - "
                         "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ.\n\n"
                         "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:\n"
                         "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É.",
                         reply_markup=keyboard_client)


@dp.message_handler()
async def reply_text(message: types.Message):
    if message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
        await set_worker(message)
    if message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É':
        await delete_worker(message)
    if message.text == 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏':
        tasks = await check_workers(message.from_user.id)
        await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏: {tasks}",
                             reply_markup=keyboard_client)

    if message.text == 'üì° –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ':
        await worker_checker(message, await read_data(message.from_user.id))
    if message.text == '‚ö† –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ':
        await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è..')
        await disable_track(message.from_user.id)
        await message.answer('–ì–æ—Ç–æ–≤–æ!',
                             reply_markup=keyboard_client)


@dp.message_handler(commands=['delete_worker'])
async def delete_worker(message: types.Message):
    """Start deleting a task"""
    await message.answer('–í–≤–µ–¥–∏ –∏–º—è –∑–∞–¥–∞—á–∏')
    await DeleteWorker.delete_worker_name.set()


@dp.message_handler(state=DeleteWorker.delete_worker_name)
async def delete_name(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(set_worker_name=answer)
    data = await state.get_data()
    worker_name = data.get('set_worker_name')

    db_resp = await delete_data(message.from_user.id, worker_name)
    await disable_track(message.from_user.id)
    await message.answer(db_resp)
    await state.finish()


@dp.message_handler(commands=['new'], state="*")
async def set_worker(message: types.Message):
    """Start adding a task"""
    await message.answer('–í–≤–µ–¥–∏ –∏–º—è –∑–∞–¥–∞—á–∏')
    await SetWorker.set_worker_name.set()


@dp.message_handler(state=SetWorker.set_worker_name)
async def get_name(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(set_worker_name=answer)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL')
    await SetWorker.set_worker_url.set()


@dp.message_handler(state=SetWorker.set_worker_url)
async def get_url(message: types.Message, state: FSMContext):
    """Finish adding a task"""
    answer = message.text
    await state.update_data(set_worker_url=answer)
    data = await state.get_data()
    name = data.get('set_worker_name')
    url = data.get('set_worker_url')

    if not await url_validator(url):
        await state.finish()
        return await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL')

    await message.answer(f'–î–æ–±–∞–≤–ª—è–µ–º {name} –≤ –Ω–∞—à—É –±–∞–∑—É..')
    await insert_values(message.from_user.id, f"'{name}'", f"'{url}'")
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n'
                         '–í–≤–µ–¥–∏—Ç–µ /start_track, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ\n '
                         '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ')
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
